package com.jwt.controller;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.jboss.logging.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import com.jwt.model.Exam;
import com.jwt.service.ExamService;

@Controller
public class ExamController {

	private static final Logger logger = Logger
			.getLogger(ExamController.class);

	public ExamController() {
		System.out.println("ExamController()");
	}

	@Autowired
	private ExamService ExamService;

	@RequestMapping(value = "/")
	public ModelAndView listExam(ModelAndView model) throws IOException {
		logger.debug("debug:" + new Date()+this.getClass()+"listExam()" +"entering into");
		List<Exam> listExam = ExamService.getAllExams();
		logger.debug("debug:" + new Date()+this.getClass()+"listExam()" +"Calling the student service");
		model.addObject("listExam", listExam);
		logger.debug("debug:" + new Date()+this.getClass()+"listExam()" +"student service calling is completed and no of students");
		model.setViewName("home");
		logger.debug("debug:" + new Date()+this.getClass()+"listExam()" +"Redirect to home");
		return model;
	}

	@RequestMapping(value = "/newExam", method = RequestMethod.GET)
	public ModelAndView newContact(ModelAndView model) {
		Exam exam = new Exam();
		model.addObject("exam", exam);
		model.setViewName("ExamForm");
		return model;
	}

	@RequestMapping(value = "/saveExam", method = RequestMethod.POST)
	public ModelAndView saveExam(@ModelAttribute Exam student) {
		if (student.getId() == 0) { // if employee id is 0 then creating the
			// employee other updating the employee
			ExamService.addExam(student);
		} else {
			ExamService.updateExam(student);
		}
		return new ModelAndView("redirect:/");
	}

	@RequestMapping(value = "/deleteExam", method = RequestMethod.GET)
	public ModelAndView deleteExam(HttpServletRequest request) {
		int studentId = Integer.parseInt(request.getParameter("id"));
		ExamService.deleteExam(studentId);
		return new ModelAndView("redirect:/");
	}

	@RequestMapping(value = "/editExam", method = RequestMethod.GET)
	public ModelAndView editContact(HttpServletRequest request) {
		int studentId = Integer.parseInt(request.getParameter("id"));
		Exam student = ExamService.getExam(studentId);
		ModelAndView model = new ModelAndView("ExamForm");
		model.addObject("student", student);
		return model;
	}